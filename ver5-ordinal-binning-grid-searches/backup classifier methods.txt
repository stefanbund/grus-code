def deliver_models(): #deliver a matrix of classifier definitions
    random_state =42
    return [
        ('HistGradientBoostingClassifier',  HistGradientBoostingClassifier(loss='log_loss', learning_rate=0.1, max_iter=100, \
                                                                               max_leaf_nodes=31, max_depth=None, min_samples_leaf=20, \
                                                                               l2_regularization=0.0, max_bins=255, categorical_features=False, \
                                                                               monotonic_cst=None, interaction_cst=None, warm_start=False, \
                                                                               early_stopping='auto', scoring='loss', validation_fraction=0.1, \
                                                                               n_iter_no_change=10, tol=1e-07, verbose=0, random_state=42, \
                                                                               class_weight=None )),
    ('GradientBoostingClassifier', GradientBoostingClassifier(loss='log_loss', learning_rate=0.1, n_estimators=100, subsample=1.0, \
                                                       criterion='friedman_mse', min_samples_split=2, min_samples_leaf=1, \
                                                       min_weight_fraction_leaf=0.0, max_depth=3, min_impurity_decrease=0.0, \
                                                       init=None, random_state=None, max_features=None, verbose=0, max_leaf_nodes=None, \
                                                       warm_start=False, validation_fraction=0.1, n_iter_no_change=None, tol=0.0001, ccp_alpha=0.0)),
    ('RandomForestClassifier', RandomForestClassifier(n_estimators=100,  criterion='gini', max_depth=None, min_samples_split=2, min_samples_leaf=1,\
                                                      min_weight_fraction_leaf=0.0, max_features='sqrt', max_leaf_nodes=None, \
                                                      min_impurity_decrease=0.0, bootstrap=True, oob_score=False, n_jobs=None, \
                                                      random_state=42, verbose=0, warm_start=False, class_weight=None, ccp_alpha=0.0,\
                                                      max_samples=None)),
    ('ExtraTreesClassifier', ExtraTreesClassifier(n_estimators=100,  criterion='gini', max_depth=None, min_samples_split=2, min_samples_leaf=1, \
                                                  min_weight_fraction_leaf=0.0, max_features='sqrt', max_leaf_nodes=None, min_impurity_decrease=0.0,\
                                                  bootstrap=False, oob_score=False, n_jobs=None, random_state=42, verbose=0, warm_start=False,\
                                                  class_weight=None, ccp_alpha=0.0, max_samples=None)),
    ('RandomTreesEmbedding', RandomTreesEmbedding(n_estimators=100, max_depth=5, min_samples_split=2, min_samples_leaf=1, min_weight_fraction_leaf=0.0, \
                          max_leaf_nodes=None, min_impurity_decrease=0.0, sparse_output=True, n_jobs=None, random_state=42, verbose=0, \
                          warm_start=False)),
    ('BaggingClassifier', BaggingClassifier(estimator=None, n_estimators=10, max_samples=1.0, max_features=1.0, bootstrap=True,\
                                            bootstrap_features=False, oob_score=False, warm_start=False, n_jobs=None, random_state=42, \
                                            verbose=0, base_estimator='deprecated')),
    ('CatBoostEncoder', ce.CatBoostEncoder(verbose=0, cols='bin', drop_invariant=False, return_df=True, handle_unknown='value', handle_missing='value', \
                        random_state=42, sigma=None, a=1)),
    ('RidgeCV',RidgeCV(alphas=(0.1, 1.0, 10.0), fit_intercept=True, scoring=None, cv=None, gcv_mode=None, store_cv_values=False, \
                       alpha_per_target=False)),
    ('LassoCV',LassoCV( eps=0.001, n_alphas=100, alphas=None, fit_intercept=True, precompute='auto', max_iter=1000, tol=0.0001, copy_X=True, cv=None, \
                verbose=False, n_jobs=None, positive=False, random_state=42, selection='cyclic')),
    ('SVC', SVC( C=1.0, kernel='rbf', degree=3, gamma='scale', coef0=0.0, shrinking=True, probability=False, tol=0.001, cache_size=200, \
                class_weight=None, verbose=False, max_iter=-1, decision_function_shape='ovr', break_ties=False, random_state=42))]